using Microsoft.VisualStudio.TestTools.UnitTesting;
using PitHero.VirtualGame;
using PitHero.AI;
using Microsoft.Xna.Framework;
using System;
using System.IO;

namespace PitHero.Tests
{
    /// <summary>
    /// Demonstration of real GOAP actions executing on virtual layer
    /// This test proves that the actual GOAP logic runs correctly with virtual data
    /// TODO: Update for simplified GOAP model
    /// </summary>
    [TestClass]
    [Ignore("Temporarily disabled - needs update for simplified GOAP model")]
    public class RealGoapOnVirtualLayerTests
    {
        [TestMethod]
        public void CompleteWorkflow_RealGoapActionsOnVirtualLayer_ShouldExecuteCorrectly()
        {
            // Capture console output for validation
            var originalOut = Console.Out;
            var stringWriter = new StringWriter();
            Console.SetOut(stringWriter);
            
            try
            {
                Console.WriteLine("=== DEMONSTRATION: Real GOAP Actions on Virtual Layer ===");
                Console.WriteLine();
                
                // STEP 1: Initialize virtual world at pit level 40
                Console.WriteLine("STEP 1: Initializing virtual world at pit level 40");
                var virtualWorld = new VirtualWorldState();
                virtualWorld.RegeneratePit(40);
                var context = new VirtualGoapContext(virtualWorld);
                
                Console.WriteLine($"Virtual world initialized:");
                Console.WriteLine($"- Pit bounds: {virtualWorld.PitBounds}");
                Console.WriteLine($"- Hero position: {context.HeroController.CurrentTilePosition}");
                Console.WriteLine($"- Wizard orb position: {virtualWorld.WizardOrbPosition}");
                Console.WriteLine();
                
                // STEP 2: Test WanderAction with real GOAP logic
                Console.WriteLine("STEP 2: Executing real WanderAction on virtual layer");
                
                // Move hero inside pit for wandering
                var startPos = new Point(virtualWorld.PitBounds.X + 2, virtualWorld.PitBounds.Y + 2);
                context.HeroController.MoveTo(startPos);
                context.HeroController.InsidePit = true;
                
                var wanderAction = new WanderAction();
                
                // Execute wander action for several iterations
                int wanderIterations = 20;
                for (int i = 0; i < wanderIterations; i++)
                {
                    var completed = wanderAction.Execute(context);
                    if (context.HeroController.IsMoving)
                    {
                        context.ExecuteMovementStep();
                    }
                    
                    if (completed)
                    {
                        Console.WriteLine($"WanderAction completed after {i + 1} iterations");
                        break;
                    }
                }
                
                Console.WriteLine($"After wandering:");
                Console.WriteLine($"- Hero position: {context.HeroController.CurrentTilePosition}");
                Console.WriteLine($"- Map explored: {context.WorldState.IsMapExplored}");
                Console.WriteLine();
                
                // STEP 3: Test MoveToWizardOrbAction with real GOAP logic
                Console.WriteLine("STEP 3: Testing MoveToWizardOrbAction on virtual layer");
                
                // Clear fog around wizard orb to make it discoverable
                if (virtualWorld.WizardOrbPosition.HasValue)
                {
                    context.WorldState.ClearFogOfWar(virtualWorld.WizardOrbPosition.Value, 1);
                    Console.WriteLine($"Cleared fog around wizard orb at {virtualWorld.WizardOrbPosition.Value}");
                }
                
                var moveToOrbAction = new MoveToWizardOrbAction();
                
                // Execute move to wizard orb action
                int moveIterations = 30;
                for (int i = 0; i < moveIterations; i++)
                {
                    var completed = moveToOrbAction.Execute(context);
                    if (context.HeroController.IsMoving)
                    {
                        context.ExecuteMovementStep();
                    }
                    
                    if (completed)
                    {
                        Console.WriteLine($"MoveToWizardOrbAction completed after {i + 1} iterations");
                        break;
                    }
                }
                
                Console.WriteLine($"After moving to wizard orb:");
                Console.WriteLine($"- Hero position: {context.HeroController.CurrentTilePosition}");
                Console.WriteLine($"- At wizard orb: {CheckAtWizardOrb(context)}");
                Console.WriteLine();
                
                // STEP 4: Test ActivateWizardOrbAction with real GOAP logic
                Console.WriteLine("STEP 4: Testing ActivateWizardOrbAction on virtual layer");
                
                // Move hero to wizard orb position if not already there
                if (virtualWorld.WizardOrbPosition.HasValue)
                {
                    context.HeroController.MoveTo(virtualWorld.WizardOrbPosition.Value);
                }
                
                var activateOrbAction = new ActivateWizardOrbAction();
                var activateCompleted = activateOrbAction.Execute(context);
                
                Console.WriteLine($"ActivateWizardOrbAction completed: {activateCompleted}");
                Console.WriteLine($"Wizard orb activated: {context.WorldState.IsWizardOrbActivated}");
                Console.WriteLine();
                
                // STEP 5: Show current visual state
                Console.WriteLine("STEP 5: Current virtual world visual state:");
                Console.WriteLine(context.GetVisualRepresentation());
                
                // STEP 6: Validate that real GOAP actions modified virtual state
                Console.WriteLine("STEP 6: Validation summary:");
                var output = stringWriter.ToString();
                
                bool usedInterfaceExecution = output.Contains("Starting execution with interface-based context");
                bool wanderExecuted = output.Contains("[WanderAction]");
                bool moveToOrbExecuted = output.Contains("[MoveToWizardOrbAction]");
                bool activateOrbExecuted = output.Contains("[ActivateWizardOrbAction]");
                
                Console.WriteLine($"✓ Used interface-based execution: {usedInterfaceExecution}");
                Console.WriteLine($"✓ WanderAction executed: {wanderExecuted}");
                Console.WriteLine($"✓ MoveToWizardOrbAction executed: {moveToOrbExecuted}");  
                Console.WriteLine($"✓ ActivateWizardOrbAction executed: {activateOrbExecuted}");
                Console.WriteLine();
                
                Console.WriteLine("=== DEMONSTRATION COMPLETE ===");
                Console.WriteLine("This proves that real GOAP actions can execute on the virtual layer!");
                Console.WriteLine("The virtual layer provides all necessary interfaces for GOAP actions to run.");
                
                // Assert that the demonstration worked
                Assert.IsTrue(usedInterfaceExecution, "Should use interface-based execution");
                Assert.IsTrue(wanderExecuted, "WanderAction should have executed");
                // Note: Other actions may not execute if preconditions aren't met, which is expected
                
            }
            finally
            {
                Console.SetOut(originalOut);
            }
        }
        
        private bool CheckAtWizardOrb(VirtualGoapContext context)
        {
            var orbPos = context.WorldState.WizardOrbPosition;
            if (!orbPos.HasValue)
                return false;
            
            return context.HeroController.CurrentTilePosition == orbPos.Value;
        }
    }
}