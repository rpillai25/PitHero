using Microsoft.VisualStudio.TestTools.UnitTesting;
using PitHero.VirtualGame;
using PitHero.AI;
using Microsoft.Xna.Framework;
using System;

namespace PitHero.Tests
{
    /// <summary>
    /// Test to validate the goal state fix and debug logging improvements
    /// Reproduces the exact scenario from user's log where hero gets stuck after exploration
    /// TODO: Update for simplified GOAP model
    /// </summary>
    [TestClass]
    [Ignore("Temporarily disabled - needs update for simplified GOAP model")]
    public class DebugLoggingAndGoalStateFixTests
    {
        [TestMethod]
        public void Level40ExplorationComplete_ShouldSetAtWizardOrbGoal_NotActivatedWizardOrbGoal()
        {
            Console.WriteLine("=== REPRODUCING USER'S STUCK HERO SCENARIO ===");
            Console.WriteLine("Testing goal state logic after exploration completes on level 40 pit");
            Console.WriteLine();
            
            // STEP 1: Set up exact scenario from user's log - Level 40 pit
            var virtualWorld = new VirtualWorldState();
            virtualWorld.RegeneratePit(40);
            var context = new VirtualGoapContext(virtualWorld);
            
            // Place hero inside pit at tile 6,3 as in user's log
            var heroPosition = new Point(6, 3);
            context.HeroController.MoveTo(heroPosition);
            context.HeroController.InsidePit = true;
            
            Console.WriteLine($"Initial hero position: {heroPosition}");
            Console.WriteLine($"Pit bounds: {virtualWorld.PitBounds}");
            Console.WriteLine($"Hero inside pit: {context.HeroController.InsidePit}");
            Console.WriteLine();
            
            // STEP 2: Simulate complete exploration - clear all fog tiles
            var pitBounds = virtualWorld.PitBounds;
            var explorationMinX = pitBounds.X + 1; // x=2
            var explorationMinY = pitBounds.Y + 1; // y=3  
            var explorationMaxX = pitBounds.Right - 2; // Last explorable column for level 40
            var explorationMaxY = pitBounds.Bottom - 2; // y=9
            
            Console.WriteLine($"Clearing fog in exploration area ({explorationMinX},{explorationMinY}) to ({explorationMaxX},{explorationMaxY})");
            
            for (int x = explorationMinX; x <= explorationMaxX; x++)
            {
                for (int y = explorationMinY; y <= explorationMaxY; y++)
                {
                    context.WorldState.ClearFogOfWar(new Point(x, y), 0);
                }
            }
            
            // Ensure wizard orb is discovered
            if (virtualWorld.WizardOrbPosition.HasValue)
            {
                context.WorldState.ClearFogOfWar(virtualWorld.WizardOrbPosition.Value, 1);
                Console.WriteLine($"Wizard orb found at: {virtualWorld.WizardOrbPosition.Value}");
            }
            
            Console.WriteLine($"Exploration complete: {context.WorldState.IsMapExplored}");
            Console.WriteLine($"Wizard orb found: {context.WorldState.IsWizardOrbFound}");
            Console.WriteLine();
            
            // STEP 3: Test the progressive goal state logic
            Console.WriteLine("=== TESTING GOAL STATE LOGIC ===");
            
            // Simulate the goal determination logic from HeroStateMachine.GetGoalState()
            bool mapExplored = context.WorldState.IsMapExplored;
            bool atWizardOrb = context.HeroController.CurrentTilePosition == virtualWorld.WizardOrbPosition;
            bool wizardOrbActivated = context.WorldState.IsWizardOrbActivated;
            
            Console.WriteLine($"Current state:");
            Console.WriteLine($"  - MapExplored: {mapExplored}");
            Console.WriteLine($"  - AtWizardOrb: {atWizardOrb}");
            Console.WriteLine($"  - WizardOrbActivated: {wizardOrbActivated}");
            Console.WriteLine();
            
            // STEP 4: Determine what the goal should be according to the new logic
            string expectedGoal;
            if (!mapExplored)
            {
                expectedGoal = "MapExplored";
            }
            else if (!atWizardOrb)
            {
                expectedGoal = "AtWizardOrb"; // This is the fix!
            }
            else if (!wizardOrbActivated)
            {
                expectedGoal = "ActivatedWizardOrb";
            }
            else
            {
                expectedGoal = "AtPitGenPoint";
            }
            
            Console.WriteLine($"Expected goal based on new logic: {expectedGoal}");
            Console.WriteLine();
            
            // STEP 5: Validate that MoveToWizardOrbAction can satisfy AtWizardOrb goal
            if (expectedGoal == "AtWizardOrb")
            {
                Console.WriteLine("=== VALIDATING MOVETOWIZARDORBACTION ===");
                
                var moveToOrbAction = new MoveToWizardOrbAction();
                
                // Check preconditions
                bool foundWizardOrbPrecondition = context.WorldState.IsWizardOrbFound;
                bool mapExploredPrecondition = context.WorldState.IsMapExplored;
                
                Console.WriteLine($"MoveToWizardOrbAction preconditions:");
                Console.WriteLine($"  - FoundWizardOrb: {foundWizardOrbPrecondition} (required: true)");
                Console.WriteLine($"  - MapExplored: {mapExploredPrecondition} (required: true)");
                
                bool preconditionsMet = foundWizardOrbPrecondition && mapExploredPrecondition;
                Console.WriteLine($"Preconditions met: {preconditionsMet}");
                Console.WriteLine();
                
                if (preconditionsMet)
                {
                    // Execute the action to verify it works
                    Console.WriteLine("Executing MoveToWizardOrbAction...");
                    var actionResult = moveToOrbAction.Execute(context);
                    
                    Console.WriteLine($"Action execution started successfully: {!actionResult}"); // false means in progress
                    Console.WriteLine($"Hero started moving: {context.HeroController.IsMoving}");
                    Console.WriteLine();
                    
                    // This validates that the action can run and the hero won't get stuck
                    Assert.IsTrue(preconditionsMet, "MoveToWizardOrbAction preconditions should be met");
                    Assert.IsFalse(actionResult, "Action should be in progress (not completed immediately)");
                }
            }
            
            // STEP 6: Final assertions
            Console.WriteLine("=== FINAL VALIDATION ===");
            
            // The key fix: After exploration, goal should be AtWizardOrb, not ActivatedWizardOrb
            Assert.IsTrue(mapExplored, "Map should be explored after clearing all fog");
            Assert.IsFalse(atWizardOrb, "Hero should not be at wizard orb initially");
            Assert.IsFalse(wizardOrbActivated, "Wizard orb should not be activated yet");
            Assert.AreEqual("AtWizardOrb", expectedGoal, "Goal should be AtWizardOrb after exploration completes");
            
            Console.WriteLine("✓ Goal state logic is correct");
            Console.WriteLine("✓ Hero will no longer get stuck after exploration");
            Console.WriteLine("✓ Progressive goal system: MapExplored → AtWizardOrb → ActivatedWizardOrb → AtPitGenPoint → OutsidePit");
            Console.WriteLine();
            Console.WriteLine("SUCCESS: Fix prevents 'No action plan satisfied our goals' issue!");
        }
        
        [TestMethod]
        public void CompleteWorkflow_AfterGoalStateFix_ShouldProgressThroughAllSteps()
        {
            Console.WriteLine("=== COMPLETE WORKFLOW VALIDATION ===");
            Console.WriteLine("Testing that entire workflow progresses correctly with goal state fix");
            Console.WriteLine();
            
            var virtualWorld = new VirtualWorldState();
            virtualWorld.RegeneratePit(40);
            var context = new VirtualGoapContext(virtualWorld);
            
            // Start inside pit
            var heroStart = new Point(3, 4);
            context.HeroController.MoveTo(heroStart);
            context.HeroController.InsidePit = true;
            
            // Step 1: Complete exploration
            var pitBounds = virtualWorld.PitBounds;
            for (int x = pitBounds.X + 1; x < pitBounds.Right - 1; x++)
            {
                for (int y = pitBounds.Y + 1; y < pitBounds.Bottom - 1; y++)
                {
                    context.WorldState.ClearFogOfWar(new Point(x, y), 0);
                }
            }
            
            if (virtualWorld.WizardOrbPosition.HasValue)
            {
                context.WorldState.ClearFogOfWar(virtualWorld.WizardOrbPosition.Value, 1);
            }
            
            Console.WriteLine("✓ Step 1: Exploration complete");
            Assert.IsTrue(context.WorldState.IsMapExplored);
            Assert.IsTrue(context.WorldState.IsWizardOrbFound);
            
            // Step 2: Move to wizard orb
            var moveToOrbAction = new MoveToWizardOrbAction();
            context.HeroController.MoveTo(virtualWorld.WizardOrbPosition.Value);
            
            Console.WriteLine("✓ Step 2: Hero moved to wizard orb");
            Assert.AreEqual(virtualWorld.WizardOrbPosition.Value, context.HeroController.CurrentTilePosition);
            
            // Step 3: Activate wizard orb
            var activateOrbAction = new ActivateWizardOrbAction();
            var activateResult = activateOrbAction.Execute(context);
            
            Console.WriteLine("✓ Step 3: Wizard orb activated");
            Assert.IsTrue(activateResult, "Activate action should complete immediately");
            Assert.IsTrue(context.WorldState.IsWizardOrbActivated);
            Assert.IsTrue(context.HeroController.MovingToInsidePitEdge);
            
            // Step 4: Move to pit generation point (simulated)
            context.HeroController.MoveTo(new Point(34, 6)); // Pit gen point
            context.HeroController.MovingToPitGenPoint = false; // Reached destination
            
            Console.WriteLine("✓ Step 4: Hero at pit generation point");
            Assert.AreEqual(new Point(34, 6), context.HeroController.CurrentTilePosition);
            
            // Step 5: Ready for pit regeneration
            Console.WriteLine("✓ Step 5: Ready for pit regeneration cycle");
            Console.WriteLine();
            Console.WriteLine("COMPLETE WORKFLOW SUCCESS:");
            Console.WriteLine("  Exploration → AtWizardOrb → ActivatedWizardOrb → AtPitGenPoint → Ready for regeneration");
            
            Assert.IsTrue(context.WorldState.IsMapExplored);
            Assert.IsTrue(context.WorldState.IsWizardOrbActivated);
            Assert.AreEqual(new Point(34, 6), context.HeroController.CurrentTilePosition);
        }
    }
}