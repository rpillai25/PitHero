using Microsoft.VisualStudio.TestTools.UnitTesting;
using PitHero.VirtualGame;
using PitHero.AI;
using Microsoft.Xna.Framework;
using System;
using System.IO;

namespace PitHero.Tests
{
    /// <summary>
    /// Tests to reproduce and fix the GOAP goal state issue where hero gets stuck
    /// after finishing exploration with "No action plan satisfied our goals"
    /// </summary>
[Ignore("Temporarily disabled - needs update for simplified GOAP model")]
    [TestClass]
    public class GoapGoalStateIssueTests
    {
        [TestMethod]
        public void HeroStuckAfterExploration_ShouldBeReproducible()
        {
            // Capture console output for validation
            var originalOut = Console.Out;
            var stringWriter = new StringWriter();
            Console.SetOut(stringWriter);
            
            try
            {
                Console.WriteLine("=== REPRODUCING HERO STUCK AFTER EXPLORATION ISSUE ===");
                Console.WriteLine("This test demonstrates the current problem where hero gets stuck");
                Console.WriteLine("after finishing wandering because goal state only includes MapExplored.");
                Console.WriteLine();
                
                // STEP 1: Initialize virtual world and complete exploration
                Console.WriteLine("STEP 1: Initialize virtual world at pit level 40");
                var virtualWorld = new VirtualWorldState();
                virtualWorld.RegeneratePit(40);
                var context = new VirtualGoapContext(virtualWorld);
                
                // Place hero inside pit
                var pitCenter = new Point(virtualWorld.PitBounds.X + 2, virtualWorld.PitBounds.Y + 2);
                context.HeroController.MoveTo(pitCenter);
                context.HeroController.InsidePit = true;
                context.HeroController.AdjacentToPitBoundaryFromOutside = false;
                
                Console.WriteLine($"Initial state:");
                Console.WriteLine($"- Hero position: {context.HeroController.CurrentTilePosition}");
                Console.WriteLine($"- Inside pit: {context.HeroController.InsidePit}");
                Console.WriteLine($"- Map explored: {context.WorldState.IsMapExplored}");
                Console.WriteLine();
                
                // STEP 2: Simulate completing exploration (as WanderAction would do)
                Console.WriteLine("STEP 2: Complete exploration (simulate WanderAction finishing)");
                
                // Clear all fog to mark exploration as complete
                var pitBounds = virtualWorld.PitBounds;
                for (int x = pitBounds.X + 1; x < pitBounds.Right - 1; x++)
                {
                    for (int y = pitBounds.Y + 1; y < pitBounds.Bottom - 1; y++)
                    {
                        context.WorldState.ClearFogOfWar(new Point(x, y), 0);
                    }
                }
                
                // Ensure wizard orb is found
                if (virtualWorld.WizardOrbPosition.HasValue)
                {
                    context.WorldState.ClearFogOfWar(virtualWorld.WizardOrbPosition.Value, 1);
                    Console.WriteLine($"Cleared fog around wizard orb at {virtualWorld.WizardOrbPosition.Value}");
                }
                
                Console.WriteLine($"After exploration completion:");
                Console.WriteLine($"- Map explored: {context.WorldState.IsMapExplored}");
                Console.WriteLine($"- Wizard orb found: {context.WorldState.IsWizardOrbFound}");
                Console.WriteLine($"- Wizard orb activated: {context.WorldState.IsWizardOrbActivated}");
                Console.WriteLine();
                
                // STEP 3: Try to create a new action plan with current goal state logic
                Console.WriteLine("STEP 3: Attempt to create action plan with current goal state logic");
                
                // Simulate the current HeroStateMachine goal state logic
                var planner = CreateTestPlanner();
                var currentState = CreateCurrentWorldState(context);
                var goalState = CreateCurrentGoalState(planner); // This is the problematic goal state
                
                Console.WriteLine("Current world state:");
                LogWorldState(currentState);
                Console.WriteLine();
                
                Console.WriteLine("Goal state (current implementation):");
                LogWorldState(goalState);
                Console.WriteLine();
                
                var actionPlan = planner.Plan(currentState, goalState);
                
                if (actionPlan == null || actionPlan.Count == 0)
                {
                    Console.WriteLine("❌ ISSUE REPRODUCED: No action plan satisfied our goals");
                    Console.WriteLine("This is exactly the problem reported - hero gets stuck after exploration!");
                }
                else
                {
                    Console.WriteLine($"✓ Action plan found with {actionPlan.Count} actions: {string.Join(" -> ", actionPlan)}");
                }
                Console.WriteLine();
                
                // STEP 4: Test with improved goal state logic
                Console.WriteLine("STEP 4: Test with improved goal state logic");
                var improvedGoalState = CreateImprovedGoalState(planner, context);
                
                Console.WriteLine("Improved goal state:");
                LogWorldState(improvedGoalState);
                Console.WriteLine();
                
                var improvedActionPlan = planner.Plan(currentState, improvedGoalState);
                
                if (improvedActionPlan != null && improvedActionPlan.Count > 0)
                {
                    Console.WriteLine($"✓ SOLUTION WORKS: Action plan found with {improvedActionPlan.Count} actions: {string.Join(" -> ", improvedActionPlan)}");
                    Console.WriteLine("The improved goal state successfully continues the workflow!");
                }
                else
                {
                    Console.WriteLine("❌ Improved goal state still doesn't work");
                }
                
                var output = stringWriter.ToString();
                
                // Assert that we reproduced the issue
                Assert.IsTrue(output.Contains("ISSUE REPRODUCED"), "Should reproduce the stuck hero issue");
                Assert.IsTrue(output.Contains("SOLUTION WORKS"), "Should demonstrate the solution works");
                
                Console.WriteLine();
                Console.WriteLine("=== TEST COMPLETE ===");
                Console.WriteLine("Successfully reproduced and demonstrated solution for hero stuck issue");
            }
            finally
            {
                Console.SetOut(originalOut);
            }
        }
        
        /// <summary>
        /// Create a test planner with all actions
        /// </summary>
        private Nez.AI.GOAP.ActionPlanner CreateTestPlanner()
        {
            var planner = new Nez.AI.GOAP.ActionPlanner();
            
            // Add all hero actions
            planner.AddAction(new MoveToPitAction());
            planner.AddAction(new JumpIntoPitAction());
            planner.AddAction(new WanderAction());
            planner.AddAction(new MoveToWizardOrbAction());
            planner.AddAction(new ActivateWizardOrbAction());
            planner.AddAction(new MovingToInsidePitEdgeAction());
            planner.AddAction(new JumpOutOfPitAction());
            planner.AddAction(new MoveToPitGenPointAction());
            
            return planner;
        }
        
        /// <summary>
        /// Create world state representing current situation (exploration complete)
        /// </summary>
        private Nez.AI.GOAP.WorldState CreateCurrentWorldState(VirtualGoapContext context)
        {
            var planner = CreateTestPlanner();
            var ws = Nez.AI.GOAP.WorldState.Create(planner);
            
            // Set current state flags
            ws.Set(GoapConstants.HeroInitialized, true);
            ws.Set(GoapConstants.PitInitialized, true);
            ws.Set(GoapConstants.InsidePit, true);
            ws.Set(GoapConstants.MapExplored, true);
            ws.Set(GoapConstants.FoundWizardOrb, true);
            
            // Wizard orb not yet activated (this is where hero should continue)
            ws.Set(GoapConstants.ActivatedWizardOrb, false);
            ws.Set(GoapConstants.AtWizardOrb, false);
            ws.Set(GoapConstants.AtPitGenPoint, false);
            ws.Set(GoapConstants.OutsidePit, false);
            
            return ws;
        }
        
        /// <summary>
        /// Current goal state logic (problematic - only MapExplored)
        /// </summary>
        private Nez.AI.GOAP.WorldState CreateCurrentGoalState(Nez.AI.GOAP.ActionPlanner planner)
        {
            var goal = Nez.AI.GOAP.WorldState.Create(planner);
            goal.Set(GoapConstants.MapExplored, true); // This is the current problematic goal
            return goal;
        }
        
        /// <summary>
        /// Improved goal state logic (progressive goals)
        /// </summary>
        private Nez.AI.GOAP.WorldState CreateImprovedGoalState(Nez.AI.GOAP.ActionPlanner planner, VirtualGoapContext context)
        {
            var goal = Nez.AI.GOAP.WorldState.Create(planner);
            
            // Progressive goal logic based on current state
            if (!context.WorldState.IsMapExplored)
            {
                // Primary goal: explore the map
                goal.Set(GoapConstants.MapExplored, true);
            }
            else if (!context.WorldState.IsWizardOrbActivated)
            {
                // Secondary goal: activate wizard orb
                goal.Set(GoapConstants.ActivatedWizardOrb, true);
            }
            else
            {
                // Final goal: return to pit generation point to restart cycle
                goal.Set(GoapConstants.AtPitGenPoint, true);
            }
            
            return goal;
        }
        
        /// <summary>
        /// Log world state for debugging
        /// </summary>
        private void LogWorldState(Nez.AI.GOAP.WorldState state)
        {
            Console.WriteLine($"  WorldState description: {state.Describe(CreateTestPlanner())}");
        }
    }
}